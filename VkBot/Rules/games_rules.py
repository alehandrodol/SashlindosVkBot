from datetime import datetime

from typing import Union

from vkbottle.bot import Message
from vkbottle.dispatch.rules import ABCRule

from config import ctx_storage, moscow_zone

from my_types import MultiRoulette, RouletteType


class RouletteRule(ABCRule[Message]):
    async def check(self, message: Message) -> bool:
        multi_roulette: MultiRoulette = ctx_storage.get("MultiRoulette")
        if multi_roulette.date_for_multi is None:
            return False

        if message.from_id not in multi_roulette.users_award.keys():
            print(multi_roulette.users_award.keys())
            await message.answer("–í—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏üò¨")
            return False

        today = datetime.now(tz=moscow_zone).date()

        if today != multi_roulette.date_for_multi:
            await message.answer("–í–∞—à–µ –≤—Ä–µ–º—è –Ω–∞ —Ä—É–ª–µ—Ç–∫—É —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—åüò¨")
            return False

        return True


class ChooseRoulette(ABCRule[Message]):
    async def check(self, message: Message) -> Union[dict, bool]:
        splited_msg = message.text.split()
        try:
            command = splited_msg[0]
        except IndexError:
            return False
        if command.lower() not in {"—Ü–≤–µ—Ç:", "—Ç—Ä–µ—Ç—å:", "—á–∏—Å–ª–æ:"}:
            return False
        if len(splited_msg) != 2:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            return False
        r_type: RouletteType = RouletteType.dummy
        if command.lower() == "—Ü–≤–µ—Ç:":
            r_type = RouletteType.color
            if splited_msg[1] not in {"–∫—Ä–∞—Å–Ω—ã–π", "—á—ë—Ä–Ω—ã–π"}:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–≤–µ—Ç")
                return False
        elif command.lower() == "—Ç—Ä–µ—Ç—å:":
            r_type = RouletteType.triple
            if not splited_msg[1].isdigit() or (not (1 <= int(splited_msg[1]) <= 3)):
                await message.answer("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
                return False
        elif command.lower() == "—á–∏—Å–ª–æ:":
            r_type = RouletteType.number
            if not splited_msg[1].isdigit() or (not (0 <= int(splited_msg[1]) <= 36)):
                await message.answer("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36")
                return False
        return {"args": (r_type, splited_msg[1])}
