import asyncio

import pytz
from datetime import datetime

from vkbottle.bot import BotLabeler, Message
from vkbottle_types.codegen.objects import UsersUserFull

from config import api, ctx_storage

from db.connection import SessionManager
from db.utils.users import get_users_from_chat
from db.models import Chat, LaunchInfo, User

from utils import daily_utils
from utils import base_utils

from messages import default_msg
from my_types import ChosenUser, MultiRoulette
from Rules import ChatIdRule  # TODO —É–±—Ä–∞—Ç—å –ø—Ä–∏ —Ä–µ–ª–∏–∑–µ


daily_labeler = BotLabeler()
daily_labeler.vbml_ignore_case = True
daily_labeler.auto_rules = [ChatIdRule(chat_id=1)]  # TODO —É–±—Ä–∞—Ç—å –ø—Ä–∏ —Ä–µ–ª–∏–∑–µ


@daily_labeler.message(text=default_msg.DAILY)
async def dailies_people(message: Message):
    chat: Chat = await base_utils.get_chat_sure(message)
    launch: LaunchInfo = await base_utils.get_launch_info_sure(message.chat_id)

    moscow_zone = pytz.timezone("Europe/Moscow")
    today = datetime.now(tz=moscow_zone).date()

    if not (launch.daily_launch_date is None or today > launch.daily_launch_date):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏
        today_pdr: UsersUserFull = await api.users.get(chat.today_pdr)
        today_pass: UsersUserFull = await api.users.get(chat.today_pass)
        await message.answer(f"–ß—ë? –° –ø–∞–º—è—Ç—å—é –ø—Ä–æ–±–ª–µ–º—ã?\n"
                             f"–°–µ–≥–æ–¥–Ω—è –ø–∏–¥–æ—Ä - {today_pdr.last_name} {today_pdr.first_name}\n"
                             f"–ê —Ç—Ä–∞—Ö–∞–µ—Ç –æ–Ω - {today_pass.last_name_gen} {today_pass.first_name_gen}")
        return

    if not launch.up_to_date_phrase:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —Ñ—Ä–∞–∑–∞ –¥–Ω—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
        launch = await daily_utils.set_day_phrase(launch)

    session_maker = SessionManager().get_session_maker()
    async with session_maker() as session:
        chat_users: list[User] = await get_users_from_chat(message.chat_id, session)
        if len(chat_users) == 0:
            await daily_utils.fill_users(message)
            chat_users = await get_users_from_chat(message.chat_id, session)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ—Ä–∞–∑–æ–π –¥–Ω—è –∏ 33% –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ—É–¥–∞—á—É
    if message.text != launch.day_phrase or base_utils.my_random(100) < 33:
        await message.reply(f"{message.text} - —ç—Ç–∞ —Ñ—Ä–∞–∑–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–¥–æ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è? ü§°\n"
                            f"‚Ä¢ –ù–æ –∑–∞ –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–∞–µ—à—å +5")
        await base_utils.make_reward(message.from_id, 5)
        return

    await message.reply(f"–•–æ—Ä–æ—à, —Å–µ–≥–æ–¥–Ω—è [id{message.from_id}|–¢—ã] —É–≥–∞–¥–∞–ª –∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É!\n"
                        f"‚Ä¢ –ò –ø–æ–ª—É—á–∏–ª –∑–∞ —ç—Ç–æ +25 –æ—á–∫–æ–≤")
    await base_utils.make_reward(message.from_id, 25)
    await asyncio.sleep(1)

    await daily_utils.update_launch_info(message.from_id, launch)

    if launch.year_launch_num is None or today.year > launch.year_launch_num:
        chosen_year: ChosenUser = await daily_utils.choose_year_guy(chat_users, chat, launch)
        await base_utils.make_reward(chosen_year.user_record.id, chosen_year.reward)
        await message.answer(chosen_year.message)
        await asyncio.sleep(3)

    dailies = await daily_utils.choose_dailies(chat_users, chat, launch)
    daily_pdr: ChosenUser = dailies[0]
    daily_pass: ChosenUser = dailies[1]

    await base_utils.make_reward(daily_pdr.user_record.id, daily_pdr.reward)
    await base_utils.make_reward(daily_pass.user_record.id, daily_pass.reward)

    await message.answer(
        f'–ü–∏–¥–æ—Ä –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è - [id{daily_pdr.user_record.id}|{daily_pdr.user_record.firstname} '
        f'{daily_pdr.user_record.lastname}]\n'
        f'{daily_pdr.message}\n'
        f'–ê —Ç—Ä–∞—Ö–∞–µ—Ç –æ–Ω - [id{daily_pass.user_record.id}|{daily_pass.user_record.firstname} '
        f'{daily_pass.user_record.lastname}]\n'
        f'{daily_pass.message}'
    )

    await daily_utils.update_chat(daily_pdr.user_record.id, daily_pass.user_record.id, chat)

    await asyncio.sleep(1)
    await message.answer(f'[id{daily_pdr.user_record.id}|{daily_pdr.user_record.firstname}] –∏ '
                         f'[id{daily_pass.user_record.id}|{daily_pass.user_record.firstname}], '
                         f'–≤—ã –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É –∏ —É–º–Ω–æ–∂–∏—Ç—å –≤–∞—à –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é.\n'
                         f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ "—Ä—É–ª–µ—Ç–∫–∞"üé∞')

    multi_roulette: MultiRoulette = ctx_storage.get("MultiRoulette")
    multi_roulette.date_for_multi = today
    multi_roulette.users_award = {
        daily_pdr.user_record.id: daily_pdr.reward,
        daily_pass.user_record.id: daily_pass.reward
    }
    ctx_storage.set("MultiRoulette", multi_roulette)
