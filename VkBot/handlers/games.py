import asyncio

from vkbottle.bot import BotLabeler, Message
from vkbottle.dispatch.rules.base import VBMLRule

from config import ctx_storage

from Rules import RouletteRule, ChooseRoulette, ChatIdRule
from my_types import Color, RouletteType, MultiRoulette
from my_types.objects import reds, blacks
from utils import games, base_utils


games_labeler = BotLabeler()
games_labeler.vbml_ignore_case = True
games_labeler.auto_rules = [ChatIdRule(chat_id=1)]


@games_labeler.message(VBMLRule("—Ä—É–ª–µ—Ç–∫–∞"), RouletteRule())
async def roulette_handler(message: Message):
    await message.answer(f'–û, —è –≤–∏–∂—É [id{message.from_id}|—Ç—ã] —Ä–∏—Å–∫–æ–≤—ã–π –ø–∞—Ä–µ–Ω—åüòà\n'
                         f'–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ã–±–µ—Ä–µ—Ç –æ–¥–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 37 –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–∏\n'
                         f'–£ —Ç–µ–±—è –µ—Å—Ç—å —Ç—Ä–∏ –æ–ø—Ü–∏–∏:\n'
                         f'‚Ä¢ –£–º–Ω–æ–∂–∏—Ç—å –≤ –¥–≤–∞ —Ä–∞–∑–∞, –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∞—Å–Ω–æ–µüî¥ –∏–ª–∏ —á—ë—Ä–Ω–æ–µ ‚ö´ (–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ "—Ü–≤–µ—Ç: <–∫—Ä–∞—Å–Ω—ã–π/—á—ë—Ä–Ω—ã–π>")\n'
                         f'‚Ä¢ –£–º–Ω–æ–∂–∏—Ç—å –≤ —Ç—Ä–∏ —Ä–∞–∑–∞, –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ 3-—ë—Ö —Ç—Ä–µ—Ç–µ–π (–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ "—Ç—Ä–µ—Ç—å: <—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3>")\n'
                         f'‚Ä¢ –£–º–Ω–æ–∂–∏—Ç—å –≤ 36 —Ä–∞–∑, —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36 (–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ "—á–∏—Å–ª–æ: <—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36>")')


@games_labeler.message(ChooseRoulette(), RouletteRule())
async def start_roulette(message: Message, args: tuple[RouletteType, str]):
    number = -1
    match args[0]:
        case RouletteType.color:
            color = Color.red if args[1] == Color.red.value else Color.black
            number, result = games.roulette(color=color)
        case RouletteType.triple:
            number, result = games.roulette(triple=int(args[1]))
        case RouletteType.number:
            number, result = games.roulette(number=int(args[1]))
        case _:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ [id221767748|—Ä–∞–∑–±–µ—Ä–∏—Å—å],"
                                 f"[id{message.from_id}|—Ç–≤–æ–π] —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –ø—Ä–µ–∂–Ω–∏–º")
            result = 1

    smile = "üü¢"
    if number in reds:
        smile = "üî¥"
    elif number in blacks:
        smile = "‚ö´"
    await message.answer(f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {number}{smile}")

    multi_roulette: MultiRoulette = ctx_storage.get("MultiRoulette")
    reward: int = multi_roulette.users_award[message.from_id]
    await asyncio.sleep(1)
    if result == 0:
        await message.answer(f"–£—É—É–ø—Å, [id{message.from_id}|—Ç–µ–±–µ] –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –º–Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã—á–µ—Å—Ç—å —É —Ç–µ–±—è "
                             f"–ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–µ–≥–æ–¥–Ω—è —Ä–µ–π—Ç–∏–Ω–≥ ({reward})")
    if result == 2 or result == 3:
        await message.answer(f"–ê —Ç—ã —Ö–æ—Ä–æ—à!\n–¢—ã —É–º–Ω–æ–∂–∏–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–∏–∑ –≤ {result} —Ä–∞–∑–∞ü•≥\n"
                             f"–ò –ø–æ–ª—É—á–∏–ª —Å–≤–µ—Ä—Ö—É {reward * (result-1)}")
    if result == 36:
        await message.answer(f"–ï–±–∞—Ç—åüò±, —è –Ω–µ –≤–µ—Ä—é —Å–≤–æ–∏–º –≥–ª–∞–∑–∞–º, —è –Ω–µ –¥—É–º–∞–ª, —á—Ç–æ —ç—Ç–æ—Ç –¥–µ–Ω—å –∫–æ–≥–¥–∞-–ª–∏–±–æ –Ω–∞—Å—Ç—É–ø–∏—Ç...\n"
                             f"–ù–æ —Ç—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ, —Ç—ã —É–º–Ω–æ–∂–∏–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–∏–∑ –≤ 36 —Ä–∞–∑"
                             f"–ò –ø–æ–ª—É—á–∏–ª —Å–≤–µ—Ä—Ö—É {reward * (result-1)}")
    await base_utils.make_reward(user_id=message.from_id, chat_id=message.chat_id, points=reward * (result-1))
    multi_roulette.users_award.pop(message.from_id)
    ctx_storage.set("MultiRoulette", multi_roulette)
